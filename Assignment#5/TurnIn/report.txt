Lab.txt

1. In tr2b.c:
In the main function:
	-Check the length of the first argument char *from
	and the length of the second argument char *to
	using strlen.
	-If the lengths are not equal, throw error with stderr and exit(1)
	-Check for duplicates in the char *from argument
	-Input from stdin until eof using getchar(). If char is part of
	char *from, then output in stdout with putchar().
To test my program:
I first compiled with the command:
	gcc tr2b.c -o tr2b
Then I ran the executable using:
	./tr2b 'abcd' 'wxyz' < someFile.txt
To test reading from stdin:
	./tr2b 'abcd' 'wxyz'
	>testing abcd
	testing wxyz
	Control-d to exit user input

2. In tr2u.c:
Instead of getchar(), use read for each byte.
Instead of putchar(), use write to write each byte.
Therefore, tr2u.c will be reading directly from system calls.
The read command is read(STDIN_FILENO, ch, size)
The write command is write(STDOUT_FILENO, ch, size)
To test my program:
I first compiled with the command:
	gcc tr2u.b -o tr2u
Then I ran the executable using:
	./tr2u 'abcd' 'wxyz' < someFile.txt
To test reading from stdin:
	./tr2u 'abcd' 'wxyz' 
	>testing abcd
	testing wxyz
	Control-d to exit user input.

Notice that between tr2b.c and tr2u.c are using the same commands
and should be ran exactly the same but the implementation differed.

3. strace
I used the strace command to intercept and print out system calls
In order to have a file containing at least 5,000,000 bytes, I created a file

head --bytes=5000000 /dev/urandom > bigFile.txt

a) To compare system calls when copying one file to another,
man strace
Notice that option -c is to report a summary for count time, calls, and
errors on program exit.
I used the following command
strace -c ./tr2b 'ab' 'xy' < bigFile.txt > straceB.txt

Then this is the following output:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 28.49    0.000102          11         9           mmap
 17.32    0.000062          16         4           mprotect
 10.61    0.000038          10         4           fstat
  8.38    0.000030          15         2           read
  8.38    0.000030          30         1           write
  8.38    0.000030          15         2           open
  6.15    0.000022          22         1           munmap
  4.19    0.000015          15         1         1 access
  3.91    0.000014           7         2           close
  2.23    0.000008           8         1           brk
  1.96    0.000007           7         1           arch_prctl
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00    0.000358                    29         1 total

In total, there was 29 system calls when we ran tr2b.c

To find how many system calls it takes for tr2u.c
strace -c ./tr2u 'ab' 'xy' < bigFile.txt > straceU.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.74   22.608454           5   5000000           write
 45.26   18.695799           4   5000002           read
  0.00    0.000074          11         7           mmap
  0.00    0.000047          12         4           mprotect
  0.00    0.000025          25         1           munmap
  0.00    0.000009           5         2           close
  0.00    0.000009           9         1           arch_prctl
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00   41.304417              10000024         1 total

Then this is the following output:
(taking a significantly longer time to run the command)

With tr2u.c having a significantly more number of system calls, we see that
tr2b.c is much more efficient. This is because tr2u.c has to read and write
each individual byte up to the 5,000,000 bytes in that bigFile.

b) Comparing system calls when copying a file to the terminal
I used the following bommands
strace -c ./tr2b 'ab' 'xy' < bigFile.txt
time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 26.34    0.000059           7         9           mmap
 17.86    0.000040          10         4           mprotect
 12.05    0.000027          27         1           munmap
  9.82    0.000022          11         2           open
  8.04    0.000018           9         2           read
  7.59    0.000017           4         4           fstat
  6.70    0.000015          15         1           write
  4.02    0.000009           9         1         1 access
  4.02    0.000009           9         1           execve
  1.79    0.000004           4         1           brk
  0.89    0.000002           1         2           close
  0.89    0.000002           2         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.000224                    29         1 total

strace -c ./tr2u 'ab' 'xy' < bigFile.txt
time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.09   26.081564           5   5000000           write
 42.91   19.605465           4   5000002           read
  0.00    0.000086          12         7           mmap
  0.00    0.000084          84         1           brk
  0.00    0.000059          15         4           mprotect
  0.00    0.000031          16         2           open
  0.00    0.000023          23         1           munmap
  0.00    0.000014           7         2           close
  0.00    0.000014           7         2           fstat
  0.00    0.000014          14         1         1 access
  0.00    0.000011          11         1           execve
  0.00    0.000007           7         1           arch_prctl

Notice, that the number of system calls are the same as part a. 

4. Using the time command to measure how fast each program is
a) when copying one file to another
time ./tr2b 'ab' 'xy' < bigFile.txt > timeB.txt

real	0m0.005s
user	0m0.002s
sys	0m0.001s

time ./tr2U 'ab' 'xy' < bigFile.txt > timeU.txt

real	0m12.201s
user	0m3.207s
sys	0m8.951s

b) when copying a file to terminal
time ./tr2b 'ab' 'xy < bigFile.txt
real	0m0.003s
user	0m0.001s
sys	0m0.002s

time ./tr2u 'ab' 'xy' < bigFile.txt
real	0m23.882s
user	0m6.516s
sys	0m17.307s

Notice that between the tr2u.c and the tr2b.c, 
tr2b.c takes a significantly shorter amount of time since tr2u.c
has to read and write every byte while tr2b utilizes buffered I/O
so the large size of the file doesn't require as much time for tr2b.

====================================================================
Report.txt

1. Estimate the differences in performance

To create different file lengths, I used the command seq.
For example, seq 10 will have 10 lines
seq 10 > ten.txt
seq 100 > hun.txt
seq 1000 > thous.txt
seq 10000 > tenThous.txt

To find the number of comparisons, I ran the command for each of the files:
strace -c ./sfrobu < ten.txt > output.txt
Number of Lines		|| 0 | 10 | 100 | 1000 | 10000
Number of Comparisons   ||32 | 70 | 612 | 7814 | 97816

The estimate CPU time cost as a function of the number of input lines is about
is approximately nlog(n) because when my implementation of the program uses
qsort (quicksort) so the bigO would be O(nlogn) where n is the number of input lines
and nlog(n) represents the time it takes for the program to execute.

2. Measure difference in the following functions:
sfrob
sfrobu
sfrobu -f

bigFile.txt is the 5,000,000 byte file from the lab portion.
I used the following commands:
$ time ./sfrob < bigFile.txt > output.txt
$ time ./sfrobu < bigFile.txt > output.txt
$ time ./sfrobu -f < bigFile.txt > output.txt

For sfrob:
real	0m0.003s
user	0m0.000s
sys	0m0.002s

For sfrobu:
real	0m12.545s
user	0m3.449s
sys	0m9.029s

For sfrobu -f:
real	0m13.767s
user	0m3.636s
sys	0m10.082s

Based on the results above, it's clear that sfrob is significant faster than
sfrobu, having a smaller CPU time. 

3. The rewritten program uses system calls instead of <stdlib.h> for
memory allocation so the program uses some memory allocation functions such as 
malloc, reallocfree, etc. For example, the function malloc will allocate size bytes.
Then the function will return a pointer to that allocated memory. Notice that the
memory that was allocated would not be free later on which is why there needs 
to be a later system call called free(). 
Realloc() function changes the size of the memory block. This block is pointed to
by a pointer to size bytes. The newly allocated memory will not be initialized.


To find the ratio of number of comparisons to number of input lines, I
used the command strace. Additionally, you can see the system calls from trace:

strace -c ./sfrob < bigFile.txt > output.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 28.12    0.000036           4         9           mmap
 18.75    0.000024           8         3           mprotect
 13.28    0.000017          17         1           write
  9.38    0.000012           6         2           read
  9.38    0.000012           3         4           fstat
  9.38    0.000012          12         1           munmap
  8.59    0.000011           3         4           brk
  3.12    0.000004           4         1           arch_prctl
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00    0.000128                    31         1 total


strace -c ./sfrobu < bigFile.txt > output.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 53.01   21.563724           4   5000001           write
 46.99   19.114133           4   5000003           read
  0.00    0.000622           5       114           brk
  0.00    0.000104          10        10           mmap
  0.00    0.000080          20         4           mprotect
  0.00    0.000064          21         3           open
  0.00    0.000035           9         4           munmap
  0.00    0.000029          10         3           close
  0.00    0.000019           6         3           fstat
  0.00    0.000013          13         1         1 access
  0.00    0.000013          13         1           execve
  0.00    0.000007           7         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   40.678843              10000148         1 total

strace -c ./sfrobu -f < bigFile.txt > output.txt
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 61.04   26.546136           5   5000001           write
 38.96   16.943585           3   5000003           read
  0.00    0.000458           4       114           brk
  0.00    0.000007           1        10           mmap
  0.00    0.000000           0         3           open
  0.00    0.000000           0         3           close
  0.00    0.000000           0         3           fstat
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         4           munmap
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   43.490186              10000148         1 total

Some of the system calls called include:

mmap
	This system call creates a new mapping in a virtual address space.
	If another mapping already exists, then the kernel will pick a new
	address and is returned at the end of the call.
	  void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
munmap
	This system call will delete the mappings specified in the address range.
	It will also generate invalid memory references within the address range.
	 int munmap(void *addr, size_t length);

