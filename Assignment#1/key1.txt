CS 35L Homework Assignment 1
Exercise 1.1: Moving around in Emacs
2. C-s M-c H T M L enter
3. C-s s c M-b
4. C-s s e l f enter
5. C-s a r r C-s enter (jump to first later occurrence)
6. C-e
7. C-a
8.Yes. For example, a shortcut C-s will allow you to search for keywords.
9. No, I did not have to use the arrow keys.
10. C-x C-c


Exercise 1.2: Deleting text in Emacs
2. C-s < ! - - C-a C-k enter
3. C-s < ! - - C-a C-k enter
4. C-s  < ! - - C-a C-k C-k C- k C-k C-k enter
5. C-s < ! - - - - >  enter DEL DEL DEL DEL DEL DEL DEL enter
C-s  < ! C-a C-k C-k C- k C-k C-k C-k C- k enter
C-s < ! C-a C-k enter


Exercise 1.3: Inserting text in Emacs
2. M-% 1 enter 4 2 enter y y q
3. M-< C-s U T F - 8 DEL DEL DEL DEL DEL DEL U S - A S C I I
4. M-C-s [ ^ [ : a s c i i : ] ] C-a C-k
5. M-< C-s < / o l > enter enter
6. C-x C-c


Exercise 1.4: Other editing tasks in Emacs
3. M-> C-r - - > C-a C-space C-n M-w C-y
4. M-> C-r - - > C-r up up up C-space down down right right right C-y
M-> C-r - - > C-r C-r enter left left left left C-space right right right right right right M-w C-y
M-> C-r - - > C-r C-r  C-r up up C-a C-space C-n C-n right right right M-w C-y
5.M-> C-r - - - e x e r 1 . h t m l enter C-space Drag-mouse-50 delete
6. C-x u
7. C-x C-space Drag-mouse-50 M-x c o m m e n t - r e g i o n
8. M-< M-% < o l > enter < o L > enter y y y y y y y In total, I replaced 7 occurrences 


Exercise 1.5: Doing commands in Emacs
1.M-x m a k e - d i r e c t o r y enter j u n k enter
2. M-x cd enter j u n k enter
C-x C-f h e l l o . c enter 
copy paste code
3. M-x c o m p i l e enter 
C-a C-k
gcc -o h e l l o  h e l l o . c
enter y
4. M-! . / h e l l o  >  h e l l o - o u t
5. C-x b h e l l o - o u t enter
C-u M-! . / h e l l o
This was the output: EOF on input


Exercise 1.6: Running Elisp code
1. C-x b * s c r a t c h * enter
2. ( r a n d o m   “ 6 0 5 - 1 0 1 - 3 7 4 ” ) C-j 
The random generator produced: 1121227676782154748
3. ( s e t q   x   ( r a n d o m ) ) C-j
The random generator produced: 229309303836779810
4. ( s e t q  y   ( r a n d o m ) ) C-j
The random generator produced: 1664876501216993005
5. ( *  x  y ) C-j
The product of the two variables: -1660432988343346054 
Because both the x and y numbers were so large, the buffer most have overflowed, resulting in a large negative number.
M-: ( *  x  y ) enter
The result:  -1660432988343346054 (#o243647517722435056172, #x28f4f4fe94745c7a)
The results of both the commands were the same in both outputs except the second command gave both the decimal and octa notation.
6. Because my ID number will always start from the same number, the given seed will be the same and so the pseudo-random generator will give the same sequence of numbers every time for my ID number.
7. There can be an infinite number of digits generated from a truly random generator. Therefore, the probability of the two-variable product to be mathematically correct would be zero because the probability of a buffer overflow occurring would be almost always.